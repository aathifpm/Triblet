note : its actually firebase's firestore DB...


num UserRole {
  ADMIN
  USER
}


enum SkillLevel {
  Beginner
  Intermediate
  Advanced
  Goalkeeper
  GOALKEEPER
  Striker
  STRIKER
  striker
  midfielder
  Midfielder
  MIDFIELDER
  defender
  Defender
  DEFENDER
  FORWARD
  forward
  Forward
  WINGER
  winger
  Winger
}


enum PaymentStatusBooking {
  Pending
  Paid
  Refunded
}


enum PaymentStatusPayment {
  Success
  Pending
  Failed
  Refunded
}


enum PaymentMethod {
  UPI
  Card
  Wallet
  NetBanking
}


enum EventType {
  CASUAL
  TOURNAMENT
  TRAINING
}


enum CreatedByType {
  USER
  GAMING_ARENA
}


enum MatchFormat {
  Knockout
  League
  RoundRobin
}


enum TournamentStatus {
  Upcoming
  Ongoing
  Completed
}


enum ReviewTargetType {
  GamingArena
  User
  Tournament
}


enum NotificationType {
  Booking
  Payment
  Reminder
  SystemAlert
  TournamentUpdate
}


enum AdminRole {
  SuperAdmin
  Moderator
  GameMaster
}


enum SlotStatus {
  Available
  Booked
  Closed
}


// NEW ENUMS FOR FOOTBALL MATCH TRACKING
enum MatchPeriod {
  NOT_STARTED
  FIRST_HALF
  HALF_TIME
  SECOND_HALF
  FULL_TIME
  EXTRA_TIME_FIRST
  EXTRA_TIME_BREAK
  EXTRA_TIME_SECOND
  PENALTIES
}


enum MatchStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  POSTPONED
  CANCELED
}


enum MatchEventType {
  GOAL
  YELLOW_CARD
  RED_CARD
  SUBSTITUTION
  PERIOD_CHANGE
  ASSIST
  SAVE
  FOUL
  OFFSIDE
  CORNER
  PENALTY
  OWN_GOAL
}


enum PlayerPosition {
  GK
  DEF
  MID
  FWD
}


///
/// EMBEDDED TYPES (for MongoDB)
///


type Location {
  address       String
  latitude      Float
  longitude     Float
  virtualServer String?
}


type Pricing {
  peakHours    Float
  offPeakHours Float
}


type AvailableSlot {
  date   DateTime
  time   String
  status SlotStatus
}


type SplitPaymentMember {
  userId     String @db.ObjectId
  amountPaid Float
}


type SplitPayment {
  isEnabled Boolean
  members   SplitPaymentMember[]
}


type TeamChat {
  userId    String @db.ObjectId
  message   String
  timestamp DateTime
}


type TournamentTeam {
  teamId  String   @db.ObjectId
  players String[] @db.ObjectId
}


type TournamentSchedule {
  matchId String   @db.ObjectId
  team1   String   @db.ObjectId
  team2   String   @db.ObjectId
  time    DateTime
  venue   String   @db.ObjectId
}


// NEW EMBEDDED TYPES
type PlayerStat {
  userId        String @db.ObjectId
  name          String
  number        Int
  position      PlayerPosition
  isStarting    Boolean
  isCaptain     Boolean
  goals         Int    @default(0)
  assists       Int    @default(0)
  yellowCards   Int    @default(0)
  redCards      Int    @default(0)
  saves         Int?
  minutesPlayed Int?
  shotsOnTarget Int?
  shotsOffTarget Int?
  fouls         Int?
  offsides      Int?
  corners       Int?
  tackles       Int?
  interceptions Int?
  cleanSheets   Int?
}


type TeamMatchStats {
  score         Int    @default(0)
  possession    Int    @default(50)
  shots         Int    @default(0)
  shotsOnTarget Int    @default(0)
  fouls         Int    @default(0)
  yellowCards   Int    @default(0)
  redCards      Int    @default(0)
  corners       Int    @default(0)
  offsides      Int    @default(0)
  players       PlayerStat[]
  formation     String @default("4-4-2")
  substitutes   PlayerStat[]
}


///
/// MODELS
///


model User {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?        
  email                   String         @unique
  emailVerified           DateTime?
  gender                  String?
  phone                   String?        
  password                String?        
  image                   String?        
  role                    UserRole       @default(USER)
  age                     Int?
  preferredGames          String[]       @default([])
  skillLevel              SkillLevel?
  bio                     String?
  friendIds               String[]       @db.ObjectId
  badges                  String[]       @default([])


  // Relations (with explicit relation names)
  pastBookings            Booking[]      @relation("UserBookings")
  reviewsGiven            Review[]       @relation("UserReviews")
  paymentHistory          Payment[]      @relation("UserPayments")
  notifications           Notification[] @relation("UserNotifications")
  accounts                Account[]      @relation("UserAccounts")
  partiesLed              Team[]         @relation("TeamLeader")
  ownedGamingArenas       GamingArena[]  @relation("UserGamingArenas")
  
  // NEW RELATIONS
  playerStats             PlayerStats[]  @relation("UserPlayerStats")
  matchEvents             MatchEvent[]   @relation("PlayerEvents")
  secondaryMatchEvents    MatchEvent[]   @relation("SecondaryPlayerEvents")
  careerStats             PlayerCareerStats? @relation("UserCareerStats")


  isTwoFactorEnabled      Boolean        @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?        @db.ObjectId


  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?


  user              User    @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([userId])
}


model GamingArena {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String         @db.ObjectId
  owner          User           @relation("UserGamingArenas", fields: [ownerId], references: [id])
  name           String
  location       Location      
  gamesAvailable String[]       @default([])
  pricing        Pricing        
  amenities      String[]       @default([])
  images         String[]       @default([])
  rules          String?
  totalReviews   Int?
  averageRating  Float?
  availableSlots AvailableSlot[]
 
  bookings       Booking[]      @relation("ArenaBookings")
  // tournaments    Tournament[]   @relation("ArenaTournaments")
  
  // NEW RELATIONS
  matchVenues    Match[]        @relation("MatchVenue")


  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation("UserBookings", fields: [userId], references: [id])
  arenaId       String        @db.ObjectId
  arena         GamingArena   @relation("ArenaBookings", fields: [arenaId], references: [id])
  TeamId        String?       @db.ObjectId
  Team          Team?         @relation("TeamBookings", fields: [TeamId], references: [id])
  bookingDate   DateTime
  timeSlot      String
  paymentStatus PaymentStatusBooking
  amount        Float
  splitPayment  SplitPayment?
 
  payments      Payment[]     @relation("BookingPayments")


  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Team {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  createdById        String      @db.ObjectId
  name               String
  leader             User        @relation("TeamLeader", fields: [createdById], references: [id])
  game               String
  eventType          EventType
  date               DateTime
  time               String
  maxPlayers         Int         @default(9)
  requiredSkillLevel SkillLevel?
  playersIds         String[]    @db.ObjectId
  chat               TeamChat[]
  isPrivate          Boolean
 
  bookings           Booking[]   @relation("TeamBookings")


  tournamentId       String?     @db.ObjectId
  tournament         Tournament? @relation(fields: [tournamentId], references: [id])
  
  // NEW FIELDS
  logo               String?
  formation          String?     @default("4-4-2")
  
  // NEW RELATIONS
  team1Matches       Match[]     @relation("Team1Matches")
  team2Matches       Match[]     @relation("Team2Matches")
  matchEvents        MatchEvent[] @relation("TeamEvents")
  playerStats        PlayerStats[] @relation("TeamPlayerStats")
  teamFormations     TeamFormation[] @relation("TeamFormations")


  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}


model Tournament {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  createdById    String              @db.ObjectId
  createdByType  CreatedByType
  name           String
  game           String
  location       String?
  entryFee       Float
  prizePool      Float
  matchFormat    MatchFormat
  status         TournamentStatus
  schedule       TournamentSchedule[]
 
  payments       Payment[]           @relation("TournamentPayments")
  
  // NEW RELATIONS
  matches        Match[]             @relation("TournamentMatches")
  stages         TournamentStage[]   @relation("TournamentStages")


  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt


  Team           Team[]


  liveSchedule   LiveSchedule?
  leaderboard    Leaderboard?
}


model Payment {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  user           User           @relation("UserPayments", fields: [userId], references: [id])
  bookingId      String?        @db.ObjectId
  booking        Booking?       @relation("BookingPayments", fields: [bookingId], references: [id])
  tournamentId   String?        @db.ObjectId
  tournament     Tournament?    @relation("TournamentPayments", fields: [tournamentId], references: [id])
  amount         Float
  paymentMethod  PaymentMethod
  paymentSSN     String?        // Cloudinary Secure URL
  status         PaymentStatusPayment
  transactionId  String         @unique
  createdAt      DateTime       @default(now())
}


model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation("UserReviews", fields: [userId], references: [id])
  targetId   String    @db.ObjectId
  targetType ReviewTargetType
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
}


model Notification {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation("UserNotifications", fields: [userId], references: [id])
  type      NotificationType
  message   String
  isRead    Boolean      @default(false)
  createdAt DateTime     @default(now())
}


model Admin {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String     @unique
  password    String
  role        AdminRole
  permissions String[]   @default([])
  createdAt   DateTime   @default(now())
}


/// Real-time match schedule for the tournament
model LiveSchedule {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId   String              @db.ObjectId @unique
  tournament     Tournament          @relation(fields: [tournamentId], references: [id])
  matches        LiveMatch[]         @relation("LiveScheduleMatches")
}


/// Live match details with countdown
model LiveMatch {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  team1          TournamentTeam
  team2          TournamentTeam
  startTime      DateTime           // Time in 24-hour format (HH:MM)
  status         String              // Upcoming, Ongoing, Completed
  liveScheduleId String              @db.ObjectId
  liveSchedule   LiveSchedule        @relation("LiveScheduleMatches", fields: [liveScheduleId], references: [id])
  result         String?
  delayMinutes   Int                 @default(0)  // Delay in minutes
}


/// Leaderboard showing teams and their rankings
model Leaderboard {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId   String              @db.ObjectId @unique
  tournament     Tournament          @relation(fields: [tournamentId], references: [id])
  rankings       LeaderboardEntry[]  @relation("LeaderboardRankings")
}


/// Individual team ranking
model LeaderboardEntry {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  teamId         String              @db.ObjectId
  leaderboardId  String              @db.ObjectId
  leaderboard    Leaderboard         @relation("LeaderboardRankings", fields: [leaderboardId], references: [id])
  teamName       String
  matchesPlayed  Int
  wins           Int
  losses         Int
  draws          Int
  points         Int
}


/// NEW MODELS FOR FOOTBALL MATCH TRACKING
// Match model for detailed football match data
model Match {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId    String        @db.ObjectId
  tournament      Tournament    @relation("TournamentMatches", fields: [tournamentId], references: [id])
  team1Id         String        @db.ObjectId
  team2Id         String        @db.ObjectId
  team1           Team          @relation("Team1Matches", fields: [team1Id], references: [id])
  team2           Team          @relation("Team2Matches", fields: [team2Id], references: [id])
  
  // Match details
  startTime       DateTime?
  period          MatchPeriod   @default(NOT_STARTED)
  currentTime     Int           @default(0)
  extraTime       Int           @default(0)
  matchStatus     MatchStatus   @default(NOT_STARTED)
  
  // Score and stats
  team1Score      Int           @default(0)
  team2Score      Int           @default(0)
  team1Possession Int           @default(50)
  team2Possession Int           @default(50)
  
  // Additional details
  venueId         String?       @db.ObjectId
  venue           GamingArena?  @relation("MatchVenue", fields: [venueId], references: [id])
  venueName       String?
  referee         String?
  round           String?
  notes           String?
  attendance      Int?
  weather         String?
  
  // Relations
  events          MatchEvent[]   @relation("MatchEvents")
  playerStats     PlayerStats[]  @relation("MatchPlayerStats")
  stageId         String?        @db.ObjectId
  stage           TournamentStage? @relation("StageMatches", fields: [stageId], references: [id])
  media           MatchMedia[]   @relation("MatchMedia")
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


// Player statistics for matches
model PlayerStats {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  user           User         @relation("UserPlayerStats", fields: [userId], references: [id])
  matchId        String       @db.ObjectId
  match          Match        @relation("MatchPlayerStats", fields: [matchId], references: [id])
  teamId         String       @db.ObjectId
  team           Team         @relation("TeamPlayerStats", fields: [teamId], references: [id])
  
  // Basic stats
  goals          Int          @default(0)
  assists        Int          @default(0)
  yellowCards    Int          @default(0)
  redCards       Int          @default(0)
  minutesPlayed  Int          @default(0)
  
  // Position-specific stats
  saves          Int?         // Goalkeeper
  cleanSheets    Int?         // Goalkeeper
  shotsOnTarget  Int?         // Attackers
  shotsOffTarget Int?         // Attackers
  tackles        Int?         // Defenders
  interceptions  Int?         // Defenders
  fouls          Int          @default(0)
  offsides       Int          @default(0)
  
  // Meta information
  position       PlayerPosition // GK, DEF, MID, FWD
  number         Int          @default(0)
  isStarting     Boolean      @default(false)
  isCaptain      Boolean      @default(false)
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([userId, matchId]) // Each player has one stat record per match
}


// Match events such as goals, cards, etc.
model MatchEvent {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  matchId         String       @db.ObjectId
  match           Match        @relation("MatchEvents", fields: [matchId], references: [id])
  time            Int
  type            MatchEventType
  teamId          String       @db.ObjectId
  team            Team         @relation("TeamEvents", fields: [teamId], references: [id])
  playerId        String       @db.ObjectId
  player          User         @relation("PlayerEvents", fields: [playerId], references: [id])
  secondPlayerId  String?      @db.ObjectId // For assists, substitutions
  secondPlayer    User?        @relation("SecondaryPlayerEvents", fields: [secondPlayerId], references: [id])
  additionalInfo  String?
  timestamp       DateTime     @default(now())
}


// Player career statistics (aggregated)
model PlayerCareerStats {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  userId          String       @db.ObjectId @unique
  user            User         @relation("UserCareerStats", fields: [userId], references: [id])
  
  // Career totals
  totalMatches    Int          @default(0)
  totalGoals      Int          @default(0)
  totalAssists    Int          @default(0)
  totalYellowCards Int         @default(0)
  totalRedCards   Int          @default(0)
  
  // Position-specific
  totalSaves      Int          @default(0)
  totalCleanSheets Int         @default(0)
  totalTackles    Int          @default(0)
  
  // Teams history
  teamsPlayed     String[]     @db.ObjectId
  
  updatedAt       DateTime     @updatedAt
}


// Team formation and tactics
model TeamFormation {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  teamId          String       @db.ObjectId
  team            Team         @relation("TeamFormations", fields: [teamId], references: [id])
  matchId         String?      @db.ObjectId
  formation       String       // "4-4-2", "4-3-3", etc.
  
  // Player positions
  goalkeeper      String       @db.ObjectId
  defenders       String[]     @db.ObjectId
  midfielders     String[]     @db.ObjectId
  forwards        String[]     @db.ObjectId
  substitutes     String[]     @db.ObjectId
  captain         String       @db.ObjectId
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}


// Tournament stages (groups, knockouts, etc.)
model TournamentStage {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId    String       @db.ObjectId
  tournament      Tournament   @relation("TournamentStages", fields: [tournamentId], references: [id])
  name            String       // "Group Stage", "Quarter Finals", etc.
  order           Int          // Sequence order
  startDate       DateTime
  endDate         DateTime
  matches         Match[]      @relation("StageMatches")
  groups          TournamentGroup[] @relation("StageGroups")
}


// Tournament groups (Group A, Group B, etc.)
model TournamentGroup {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  stageId         String       @db.ObjectId
  stage           TournamentStage @relation("StageGroups", fields: [stageId], references: [id])
  name            String       // "Group A", "Group B", etc.
  teams           String[]     @db.ObjectId // Team IDs
}


// Match media (highlights, photos, etc.)
model MatchMedia {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  matchId         String       @db.ObjectId
  match           Match        @relation("MatchMedia", fields: [matchId], references: [id])
  type            String       // "highlight", "photo", "video"
  url             String
  title           String?
  description     String?
  timestamp       DateTime     @default(now())
  uploadedBy      String       @db.ObjectId
}
