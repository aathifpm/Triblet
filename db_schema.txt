note : its actually firebase's firestore DB...


num UserRole {
  ADMIN
  USER
}


enum SkillLevel {
  Beginner
  Intermediate
  Advanced
  Goalkeeper
  GOALKEEPER
  Striker
  STRIKER
  striker
  midfielder
  Midfielder
  MIDFIELDER
  defender
  Defender
  DEFENDER
  FORWARD
  forward
  Forward
  WINGER
  winger
  Winger
}


enum PaymentStatusBooking {
  Pending
  Paid
  Refunded
}


enum PaymentStatusPayment {
  Success
  Pending
  Failed
  Refunded
}


enum PaymentMethod {
  UPI
  Card
  Wallet
  NetBanking
}


enum EventType {
  CASUAL
  TOURNAMENT
  TRAINING
}


enum CreatedByType {
  USER
  GAMING_ARENA
}


enum MatchFormat {
  Knockout
  League
  RoundRobin
}


enum TournamentStatus {
  Upcoming
  Ongoing
  Completed
}


enum ReviewTargetType {
  GamingArena
  User
  Tournament
}


enum NotificationType {
  Booking
  Payment
  Reminder
  SystemAlert
  TournamentUpdate
}


enum AdminRole {
  SuperAdmin
  Moderator
  GameMaster
}


enum SlotStatus {
  Available
  Booked
  Closed
}


///
/// EMBEDDED TYPES (for MongoDB)
///


type Location {
  address       String
  latitude      Float
  longitude     Float
  virtualServer String?
}


type Pricing {
  peakHours    Float
  offPeakHours Float
}


type AvailableSlot {
  date   DateTime
  time   String
  status SlotStatus
}


type SplitPaymentMember {
  userId     String @db.ObjectId
  amountPaid Float
}


type SplitPayment {
  isEnabled Boolean
  members   SplitPaymentMember[]
}


type TeamChat {
  userId    String @db.ObjectId
  message   String
  timestamp DateTime
}


type TournamentTeam {
  teamId  String   @db.ObjectId
  players String[] @db.ObjectId
}


type TournamentSchedule {
  matchId String   @db.ObjectId
  team1   String   @db.ObjectId
  team2   String   @db.ObjectId
  time    DateTime
  venue   String   @db.ObjectId
}


///
/// MODELS
///


model User {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?        
  email                   String         @unique
  emailVerified           DateTime?
  gender                  String?
  phone                   String?        
  password                String?        
  image                   String?        
  role                    UserRole       @default(USER)
  age                     Int?
  preferredGames          String[]       @default([])
  skillLevel              SkillLevel?
  bio                     String?
  friendIds               String[]       @db.ObjectId
  badges                  String[]       @default([])


  // Relations (with explicit relation names)
  pastBookings            Booking[]      @relation("UserBookings")
  reviewsGiven            Review[]       @relation("UserReviews")
  paymentHistory          Payment[]      @relation("UserPayments")
  notifications           Notification[] @relation("UserNotifications")
  accounts                Account[]      @relation("UserAccounts")
  partiesLed              Team[]         @relation("TeamLeader")
  ownedGamingArenas       GamingArena[]  @relation("UserGamingArenas")


  isTwoFactorEnabled      Boolean        @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?        @db.ObjectId


  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?


  user              User    @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)


  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime


  @@unique([email, token])
}


model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([userId])
}


model GamingArena {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  ownerId        String         @db.ObjectId
  owner          User           @relation("UserGamingArenas", fields: [ownerId], references: [id])
  name           String
  location       Location      
  gamesAvailable String[]       @default([])
  pricing        Pricing        
  amenities      String[]       @default([])
  images         String[]       @default([])
  rules          String?
  totalReviews   Int?
  averageRating  Float?
  availableSlots AvailableSlot[]
 
  bookings       Booking[]      @relation("ArenaBookings")
  // tournaments    Tournament[]   @relation("ArenaTournaments")


  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}


model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation("UserBookings", fields: [userId], references: [id])
  arenaId       String        @db.ObjectId
  arena         GamingArena   @relation("ArenaBookings", fields: [arenaId], references: [id])
  TeamId        String?       @db.ObjectId
  Team          Team?         @relation("TeamBookings", fields: [TeamId], references: [id])
  bookingDate   DateTime
  timeSlot      String
  paymentStatus PaymentStatusBooking
  amount        Float
  splitPayment  SplitPayment?
 
  payments      Payment[]     @relation("BookingPayments")


  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}


model Team {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  createdById        String      @db.ObjectId
  name               String
  leader             User        @relation("TeamLeader", fields: [createdById], references: [id])
  game               String
  eventType          EventType
  date               DateTime
  time               String
  maxPlayers         Int         @default(9)
  requiredSkillLevel SkillLevel?
  playersIds         String[]    @db.ObjectId
  chat               TeamChat[]
  isPrivate          Boolean
 
  bookings           Booking[]   @relation("TeamBookings")


  tournamentId       String?     @db.ObjectId
  tournament         Tournament? @relation(fields: [tournamentId], references: [id])


  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  logo               String?
}


model Tournament {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  createdById    String              @db.ObjectId
  createdByType  CreatedByType
  name           String
  game           String
  location       String?
  entryFee       Float
  prizePool      Float
  matchFormat    MatchFormat
  status         TournamentStatus
  schedule       TournamentSchedule[]
 
  payments       Payment[]           @relation("TournamentPayments")


  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt


  Team           Team[]


  liveSchedule   LiveSchedule?
  leaderboard    Leaderboard?
}


model Payment {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  user           User           @relation("UserPayments", fields: [userId], references: [id])
  bookingId      String?        @db.ObjectId
  booking        Booking?       @relation("BookingPayments", fields: [bookingId], references: [id])
  tournamentId   String?        @db.ObjectId
  tournament     Tournament?    @relation("TournamentPayments", fields: [tournamentId], references: [id])
  amount         Float
  paymentMethod  PaymentMethod
  paymentSSN     String?        // Cloudinary Secure URL
  status         PaymentStatusPayment
  transactionId  String         @unique
  createdAt      DateTime       @default(now())
}


model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation("UserReviews", fields: [userId], references: [id])
  targetId   String    @db.ObjectId
  targetType ReviewTargetType
  rating     Int
  comment    String?
  createdAt  DateTime  @default(now())
}


model Notification {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @db.ObjectId
  user      User         @relation("UserNotifications", fields: [userId], references: [id])
  type      NotificationType
  message   String
  isRead    Boolean      @default(false)
  createdAt DateTime     @default(now())
}


model Admin {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String     @unique
  password    String
  role        AdminRole
  permissions String[]   @default([])
  createdAt   DateTime   @default(now())
}


/// Real-time match schedule for the tournament
model LiveSchedule {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId   String              @db.ObjectId @unique
  tournament     Tournament          @relation(fields: [tournamentId], references: [id])
  matches        LiveMatch[] @relation("LiveScheduleMatches")
}


/// Live match details with countdown
model LiveMatch {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  team1          TournamentTeam
  team2          TournamentTeam
  startTime      DateTime           // Time in 24-hour format (HH:MM)
  status         String              // Upcoming, Ongoing, Completed
  liveScheduleId String              @db.ObjectId
  liveSchedule   LiveSchedule        @relation("LiveScheduleMatches", fields: [liveScheduleId], references: [id])
  result         String?
  delayMinutes   Int                 @default(0)  // Delay in minutes
}


/// Leaderboard showing teams and their rankings
model Leaderboard {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId   String              @db.ObjectId @unique
  tournament     Tournament          @relation(fields: [tournamentId], references: [id])
  rankings       LeaderboardEntry[] @relation("LeaderboardRankings")
}


/// Individual team ranking
model LeaderboardEntry {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  teamId         String              @db.ObjectId
  leaderboardId  String              @db.ObjectId
  leaderboard    Leaderboard         @relation("LeaderboardRankings", fields: [leaderboardId], references: [id])
  teamName       String
  matchesPlayed  Int
  wins           Int
  losses         Int
  draws          Int
  points         Int
}
